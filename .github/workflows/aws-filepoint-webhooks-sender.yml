name: Deploy Filepoint Webhooks Sender to Amazon ECS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: prod-filepoint-webhooks-repo
  ECS_SERVICE: prod-filepoint-webhooks
  ECS_CLUSTER: prod-filepoint-webhooks
  CONTAINER_NAME: prod-filepoint-webhooks

permissions:
  contents: read

jobs:

  get_version:
    runs-on: ubuntu-latest
    outputs:
      current-version: ${{ steps.version-step.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get version
        id: version-step
        uses: michmich112/extract-version@main
        with:
          version-file: ${{ github.workspace }}/VERSION
          schema: major.minor.build[-patch]

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    needs: get_version

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build, tag, and push image to Amazon ECR
      uses: docker/build-push-action@v5
      id: build-image
      with:
        context: .
        file: ${{ github.workspace }}/build/package/docker/Dockerfile
        tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ needs.get_version.outputs.current-version}}
        push: true

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.ECS_SERVICE }} --query taskDefinition > taskdefinition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: taskdefinition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.imageid }}

    - name: updating task-definition file
      run: cat ${{ steps.demo.outputs.task-definition }} > taskdefinition.json

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
